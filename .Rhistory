}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- y + 1, y <- y)
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- i)
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
sum(x <= 0.3 & x >= -0.2)
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
2
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
3
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
1
2
3
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
dice_roll(3)
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
print(dice_roll(3))
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(100)
?Logic
libPath
libPaths()
.libPaths()
View(dice_roll)
installed.packages()
grid.newpage()
library(grid)
grid.newpage()
grid.lines()
install.packages("xts", dependencies = TRUE)
library(xts)
update.packages()
sessionInfo()
install.packages(randtoolbox)
library(randtoolbox)
install.packages("randtoolbox", dependencies = TRUE)
library(randtoolbox)
help(package = "xts")
help(package = "zoo")
help(package = "stats")
help(package = "quantmod")
sessionInfo()
x <- seq(10, 100, 10)
x[c(8, 7, 3, 6:8, x[1])]
x[c(-3, -5, -length(x), -5)]
x[rep(c(TRUE, FALSE))]
x[c(FALSE, TRUE)]
x[ x > 77 & x < 99]
a[c("one", "two", "three", "four")]
a[c("two", "one", "three", "four", "error")]
all(x < 200); all(x > 20)
which.min(x)
x <- c(5, 3, 9)
names(x) <- c("V", "III", "IX")
attr(x, "author") <- "Caesar"
attributes(x)
print(x)
print(x)
max(c("A", "BBB", "Z"))
which.max(c("A", "BBB", "Z"))
max(c(TRUE, FALSE))
which.max(c(TRUE, FALSE))
which(c(TRUE, FALSE))
max(c("A", "BBB", "Z"))
which(c("A", "BBB", "Z") > 0)
which(c("A", "BBB", "Z") < 2)
d <- letters
x[1, 23, 5, 19, 15, 13, 5]
d <- letters
d[1, 23, 5, 19, 15, 13, 5]
d <- LETTERS
d[1, 23, 5, 19, 15, 13, 5]
d <- LETTERS
d
d[23]
k <- which.max(abs(x[-1] - x[-length(x)]))
set.seed(42)
x <- sample(1:100, 50)
k <- which.max(abs(x[-1] - x[-length(x)]))
print(k)
print(x[k])
print(x[c(k, k+1)])
set.seed(42)
x <- sample(1:100, 50)
x
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
x[-length(x)] - x[-1] >= 0
x[-1] - x[-length(x)] >= 0
is_monotone <- function(x) {
all(all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0) == TRUE)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(c(all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)) == TRUE)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
x[-1] - x[-length(x)]
x[-length(x)] - x[-1]
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0); all(x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0); all(x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
?all
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all((x[-1] - x[-length(x)]) >= 0 | (x[-length(x)] - x[-1]) >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
any(x[-1] - x[-length(x)] < 0 | x[-length(x)] - x[-1] < 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 0, 1)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(-1, -2, -3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 0, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 5, 1)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 5, 5)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] <= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] <= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-length(x)] <= x[-1]) | all(x[-length(x)] >= x[-1])
}
x <- c(5, 3, 2)
is_monotone(x)
load("C:/Users/79112/PROGRAMING/business statistics/stepik_course_1.R")
View(is_monotone)
source("C:/Users/79112/PROGRAMING/business statistics/stepik_course_1.R", echo=TRUE)
#Step 3: Logical opperartions
my_var1 == my_var2
#Step 2: Variable assiment
my_var1  <- 42
my_var2  <- 35.25
my_var1 + 100
my_var1 + my_var2 - 12
my_var3  <- my_var1^2 + my_var2^2
#Step 3: Logical opperartions
my_var1 == my_var2
my_var1 != my_var2
my_var3 >= 200
my_var3 <= 200
my_new_var  <- my_var1 == my_var2
#Step 6, 7, 10, 11: Vectors
my_vector1  <- 1:67
my_vector2  <- c(-32, 45, 67, 12.78, 129, 0, -65)
#Step 2: Variable assiment
my_var1  <- 42
my_var2  <- 35.25
my_var1 + 100
my_var1 + my_var2 - 12
my_var3  <- my_var1^2 + my_var2^2
#Step 3: Logical opperartions
my_var1 == my_var2
my_var1 != my_var2
my_var3 >= 200
my_var3 <= 200
my_new_var  <- my_var1 == my_var2
#Step 6, 7, 10, 11: Vectors
my_vector1  <- 1:67
my_vector2  <- c(-32, 45, 67, 12.78, 129, 0, -65)
my_vector2[c(1,2,3)]
my_vector2[1:3]
my_vector2[c(1,5,6,7,10)]
my_vector2 > 0
my_vector2[my_vector2 > 0]
my_vector2[my_vector2 < 0]
my_vector2[my_vector2 == 0]
my_vector1[my_vector1 > 20 & my_vector1 < 30]
my_numbers  <- my_vector1[my_vector1 > 20 & my_vector1 < 30]
positive_numbers  <- my_vector2[my_vector2 > 0]
v1  <- c(165, 178, 180, 181, 167, 178, 187, 167, 187)
mean_v1  <- mean(v1)
v1[v1 > mean_v1]
greater_than_mean  <- v1[v1 > mean_v1]
#Step 13: Lists and dataframes
age  <- c(16, 18, 22, 27)
is_maried  <- c(F, F, T, T)
name  <- c("Olga", "Maria", "Nastya", "Polina")
data = list(age, is_maried)
data[[1]][1]
data[[1]][2]
?"&"
data = list(age, is_maried, name)
my_data  <- data.frame(Name = name, Age = age, Status = is_maried)
View(my_data)
read.table(read.csv)
read.table()
?read.table
my_data <- read.csv('evals.csv')
View(my_data)
head(my_data)
head(my_data, 3)
View(my_data)
str(my_data)
str(my_data)
View(my_data)
View(my_data)
str(my_data)
summary(my_data)
names(my_data)
str(my_data< stringsAsFactors = T)
str(my_data, stringsAsFactors = T)
str(my_data, stringsAsFactors = TRUE)
?read.table
my_data <- read.csv('evals.csv', stringsAsFactors = TRUE)
head(my_data, 3)
tail(my_data, 5)
View(my_data) # позволяет увидеть в виде таблицы 1000 наблюдений
str(my_data, stringsAsFactors = TRUE) # позволяет увидеть тип данных
names(my_data) # возвращает названия колонок
summary(my_data) # возвращает  ьинимальное, максимальное, мидеанное, среднее
# значения и 1, 3 квартили
str(my_data)
my_data$score
mean(my_data$score)
summary(my_data$score)
my_data$score * 2
my_data$ten_point_scale <- my_data$score
my_data$ten_point_scale <- my_data$score * 2
my_data$new_varible <- 0
my_data$number <- 1:nrow(my_data)
my_data$score[1:10]
my_data[2, 2]
my_data[,1] == my_data$score
my_data[,1][1:nrow(my_data)] == my_data$score[1:nrow(my_data)]
my_data[, 2:5]
my_data$gender == 'female'
my_data[my_data$gender == 'female', 1]
subset(my_data, gender == 'female')
subset(my_data, score >= mean(my_data$score))
subset(my_data, score > mean(my_data$score))
my_data2 <- subset(my_data, gender = 'female')
my_data3 <- subset(my_data, gendet = 'male')
my_data4 <- cbind(my_data3, my_data2)
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gendet == 'male')
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gender == 'male')
my_data4 <- cbind(my_data3, my_data2)
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gender == 'male')
my_data4 <- rbind(my_data3, my_data2)
my_data5 <- my_data[,1:10]
my_data6 <- my_data[,11:24]
my_data7 <- cbind(my_data6, my_data5)
library(help = 'datasets')
my_data[,1]
a <- 10
if (a > 0) {
print('"a" is winner')
} else {
print('bruh')
}
a <- 10
if (a > 0) {
print('a is winner')
} else {
print('bruh')
}
a <- 0
if (a > 0) {
print('a is winner')
} else {
print('bruh')
}
if (a > 0) {
print('a is winner')
} else if (a < 0) {
print('a is loser')
} else
print('bruh')
}
if (a > 0) {
print('a is winner')
} else if (a < 0) {
print('a is loser')
} else
print('bruh')
ifelse( a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, 'a is winner', 'a is loser')
ifelse(a > 0, 'a is winner', 'a is loser')
ifelse(a > 0, 'a is winner', 'a is loser')
a <- 1
ifelse(a > 0, 'a is winner', 'a is loser')
b <- c(-1, 1)
ifelse(b > 0, 'win', 'lose')
for (i in 1:100){
print(i)
}
for (i in 1:nrow(my_data)) {
print(my_data$score[i])
}
for (i in 1:nrow(my_data)) {
if (my_data$gender[i] == male){
print(my_data$score[i])
}
}
for (i in 1:nrow(my_data)) {
if (my_data$gender[i] == 'male'){
print(my_data$score[i])
}
}
my_data$quality <- rep(NA, nrow(my_data))
my_data$quality <- rep(NA, nrow(my_data))
for (i in 1:nrow(my_data)) {
if (my_data$score[i] > 4) {
my_data$quality[i] <- 'good'
} else my_data$quality[i] <- 'bad'
}
my_data$quality <- rep(NA, nrow(my_data))
for (i in 1:nrow(my_data)) {
if (my_data$score[i] > 4) {
my_data$quality[i] <- 'good'
print(my_data$quality[i])
} else {
my_data$quality[i] <- 'bad'
print(my_data$quality[i])
}
}
