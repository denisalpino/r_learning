ifelse(runif(8) < 0.5, 'Орел', 'Решка')
ifelse(runif(8) = 0.5, 'Орел', 'Решка')
ifelse(runif(8) > 0.9, 'Орел', 'Решка')
ifelse(runif(8) < 0.9, 'Орел', 'Решка')
?runif
x <- runif(8)
ifelse(x > 2/3, 'Бумага',
ifelse(x > 1/3, 'Ножницы', 'Камень'
)
)
x <- runif(8)
ifelse(x > 2/3, 'Бумага',
ifelse(x > 1/3, 'Ножницы', 'Камень'
)
)
x <- runif(8)
ifelse(x > 2/3, 'Ножницы',
ifelse(x > 1/3, 'Камень', 'Бумага'
)
)
switch('factorial',
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
i <- 0
repeat {
i <- i + runif(1)
print(i)
if (i > 5) break
}
i <- 0
repeat {
i <- i + runif(1)
if (i > 5) break
print(i)
}
for (i in 1:8) {
ifelse(i %% 2 == 0, print('Четное'), print('Нечетное')
}
for (i in 1:8) {
ifelse(i %% 2 == 0,
print('Четное'),
print('Нечетное')
)
}
for (i in letters) {
if (i == 'b') next
if (i == 'd') break
print(i)
}
v <- 1:1e5
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e10
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e7
system.time({
x <- 0
for (i in v) x[i] <- sqrt(v[i])
})
v <- 1:1e7
system.time({
x <- sqrt(v)
})
v <- 1:1e8
system.time({
x <- sqrt(v)
})
v <- 1:1e9
system.time({
x <- sqrt(v)
})
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
ifelse(-0,2 <= x <= 0.3) y <- y + 1
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
ifelse(-0,2 <= x <= 0.3, y <- y + 1)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
ifelse(-0,2 < x < 0.3, y <- y + 1)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
ifelse(x < 0.3 & x > - 0.2, y <- y + 1)
ifelse(x < 0.3 & x > - 0.2, y <- y + 1, y <- y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- x(x < 0.3 & x > - 0.2)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
if (x < 0.3 & x > - 0.2) {
y <- y + 1
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
for (i in x) {
if (x[i] < 0.3 & x[i] > - 0.2) {
y <- y + 1
}
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
for (i in x) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
}
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
}
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
} else
next
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in length(x)) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
}
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in length(x)) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
}
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
for (i in length(x)) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + 1
}
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
for (i in length(x)) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + x[i]
}
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in length(x)) {
if (x[i] < 0.3 & x[i] > -0.2) {
y <- y + x[i]
}
}
print(y)
x <- runif(1e6, min = -1, max = 1)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- y + 1)
}
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- y + 1)
}
length(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- y + 1)
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- y + 1, y <- y)
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
y <- 0
for (i in x) {
ifelse(x[i] > -0.2 & x[i] < 0.3, y <- i)
}
print(y)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
sum(x <= 0.3 & x >= -0.2)
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
2
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
3
dice_roll <- function(n) {
return(n * round(runif(n, min = 1, max = 6)))
}
1
2
3
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
dice_roll(3)
dice_roll <- function(n) {
for (i in n) {
round(runif(n, min = 1, max = 6))
}
}
print(dice_roll(3))
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(3)
dice_roll <- function(n) {
as.integer(runif(n, 1, 7))
}
dice_roll(100)
?Logic
libPath
libPaths()
.libPaths()
View(dice_roll)
installed.packages()
grid.newpage()
library(grid)
grid.newpage()
grid.lines()
install.packages("xts", dependencies = TRUE)
library(xts)
update.packages()
sessionInfo()
install.packages(randtoolbox)
library(randtoolbox)
install.packages("randtoolbox", dependencies = TRUE)
library(randtoolbox)
help(package = "xts")
help(package = "zoo")
help(package = "stats")
help(package = "quantmod")
sessionInfo()
x <- seq(10, 100, 10)
x[c(8, 7, 3, 6:8, x[1])]
x[c(-3, -5, -length(x), -5)]
x[rep(c(TRUE, FALSE))]
x[c(FALSE, TRUE)]
x[ x > 77 & x < 99]
a[c("one", "two", "three", "four")]
a[c("two", "one", "three", "four", "error")]
all(x < 200); all(x > 20)
which.min(x)
x <- c(5, 3, 9)
names(x) <- c("V", "III", "IX")
attr(x, "author") <- "Caesar"
attributes(x)
print(x)
print(x)
max(c("A", "BBB", "Z"))
which.max(c("A", "BBB", "Z"))
max(c(TRUE, FALSE))
which.max(c(TRUE, FALSE))
which(c(TRUE, FALSE))
max(c("A", "BBB", "Z"))
which(c("A", "BBB", "Z") > 0)
which(c("A", "BBB", "Z") < 2)
d <- letters
x[1, 23, 5, 19, 15, 13, 5]
d <- letters
d[1, 23, 5, 19, 15, 13, 5]
d <- LETTERS
d[1, 23, 5, 19, 15, 13, 5]
d <- LETTERS
d
d[23]
k <- which.max(abs(x[-1] - x[-length(x)]))
set.seed(42)
x <- sample(1:100, 50)
k <- which.max(abs(x[-1] - x[-length(x)]))
print(k)
print(x[k])
print(x[c(k, k+1)])
set.seed(42)
x <- sample(1:100, 50)
x
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
x[-length(x)] - x[-1] >= 0
x[-1] - x[-length(x)] >= 0
is_monotone <- function(x) {
all(all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0) == TRUE)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(c(all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)) == TRUE)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
x[-1] - x[-length(x)]
x[-length(x)] - x[-1]
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0); all(x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0); all(x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
?all
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 5)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 3, 3, 4, 3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all((x[-1] - x[-length(x)]) >= 0 | (x[-length(x)] - x[-1]) >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
any(x[-1] - x[-length(x)] < 0 | x[-length(x)] - x[-1] < 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0)
}
x <- c(1, 0, 2, 1, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 0, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] >= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 4)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(1, 2, 0, 1)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(-1, -2, -3)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 0, 0)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 5, 1)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(0, 5, 5)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] <= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] <= 0 & x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-1] - x[-length(x)] >= 0 | x[-length(x)] - x[-1] <= 0)
}
x <- c(5, 3, 2)
is_monotone(x)
is_monotone <- function(x) {
all(x[-length(x)] <= x[-1]) | all(x[-length(x)] >= x[-1])
}
x <- c(5, 3, 2)
is_monotone(x)
