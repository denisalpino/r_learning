#Step 3: Logical opperartions
my_var1 == my_var2
my_var1 != my_var2
my_var3 >= 200
my_var3 <= 200
my_new_var  <- my_var1 == my_var2
#Step 6, 7, 10, 11: Vectors
my_vector1  <- 1:67
my_vector2  <- c(-32, 45, 67, 12.78, 129, 0, -65)
my_vector2[c(1,2,3)]
my_vector2[1:3]
my_vector2[c(1,5,6,7,10)]
my_vector2 > 0
my_vector2[my_vector2 > 0]
my_vector2[my_vector2 < 0]
my_vector2[my_vector2 == 0]
my_vector1[my_vector1 > 20 & my_vector1 < 30]
my_numbers  <- my_vector1[my_vector1 > 20 & my_vector1 < 30]
positive_numbers  <- my_vector2[my_vector2 > 0]
v1  <- c(165, 178, 180, 181, 167, 178, 187, 167, 187)
mean_v1  <- mean(v1)
v1[v1 > mean_v1]
greater_than_mean  <- v1[v1 > mean_v1]
#Step 13: Lists and dataframes
age  <- c(16, 18, 22, 27)
is_maried  <- c(F, F, T, T)
name  <- c("Olga", "Maria", "Nastya", "Polina")
data = list(age, is_maried)
data[[1]][1]
data[[1]][2]
?"&"
data = list(age, is_maried, name)
my_data  <- data.frame(Name = name, Age = age, Status = is_maried)
View(my_data)
read.table(read.csv)
read.table()
?read.table
my_data <- read.csv('evals.csv')
View(my_data)
head(my_data)
head(my_data, 3)
View(my_data)
str(my_data)
str(my_data)
View(my_data)
View(my_data)
str(my_data)
summary(my_data)
names(my_data)
str(my_data< stringsAsFactors = T)
str(my_data, stringsAsFactors = T)
str(my_data, stringsAsFactors = TRUE)
?read.table
my_data <- read.csv('evals.csv', stringsAsFactors = TRUE)
head(my_data, 3)
tail(my_data, 5)
View(my_data) # позволяет увидеть в виде таблицы 1000 наблюдений
str(my_data, stringsAsFactors = TRUE) # позволяет увидеть тип данных
names(my_data) # возвращает названия колонок
summary(my_data) # возвращает  ьинимальное, максимальное, мидеанное, среднее
# значения и 1, 3 квартили
str(my_data)
my_data$score
mean(my_data$score)
summary(my_data$score)
my_data$score * 2
my_data$ten_point_scale <- my_data$score
my_data$ten_point_scale <- my_data$score * 2
my_data$new_varible <- 0
my_data$number <- 1:nrow(my_data)
my_data$score[1:10]
my_data[2, 2]
my_data[,1] == my_data$score
my_data[,1][1:nrow(my_data)] == my_data$score[1:nrow(my_data)]
my_data[, 2:5]
my_data$gender == 'female'
my_data[my_data$gender == 'female', 1]
subset(my_data, gender == 'female')
subset(my_data, score >= mean(my_data$score))
subset(my_data, score > mean(my_data$score))
my_data2 <- subset(my_data, gender = 'female')
my_data3 <- subset(my_data, gendet = 'male')
my_data4 <- cbind(my_data3, my_data2)
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gendet == 'male')
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gender == 'male')
my_data4 <- cbind(my_data3, my_data2)
my_data2 <- subset(my_data, gender == 'female')
my_data3 <- subset(my_data, gender == 'male')
my_data4 <- rbind(my_data3, my_data2)
my_data5 <- my_data[,1:10]
my_data6 <- my_data[,11:24]
my_data7 <- cbind(my_data6, my_data5)
library(help = 'datasets')
my_data[,1]
a <- 10
if (a > 0) {
print('"a" is winner')
} else {
print('bruh')
}
a <- 10
if (a > 0) {
print('a is winner')
} else {
print('bruh')
}
a <- 0
if (a > 0) {
print('a is winner')
} else {
print('bruh')
}
if (a > 0) {
print('a is winner')
} else if (a < 0) {
print('a is loser')
} else
print('bruh')
}
if (a > 0) {
print('a is winner')
} else if (a < 0) {
print('a is loser')
} else
print('bruh')
ifelse( a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, print('a is winner'), print('a is loser'))
ifelse(a > 0, 'a is winner', 'a is loser')
ifelse(a > 0, 'a is winner', 'a is loser')
ifelse(a > 0, 'a is winner', 'a is loser')
a <- 1
ifelse(a > 0, 'a is winner', 'a is loser')
b <- c(-1, 1)
ifelse(b > 0, 'win', 'lose')
for (i in 1:100){
print(i)
}
for (i in 1:nrow(my_data)) {
print(my_data$score[i])
}
for (i in 1:nrow(my_data)) {
if (my_data$gender[i] == male){
print(my_data$score[i])
}
}
for (i in 1:nrow(my_data)) {
if (my_data$gender[i] == 'male'){
print(my_data$score[i])
}
}
my_data$quality <- rep(NA, nrow(my_data))
my_data$quality <- rep(NA, nrow(my_data))
for (i in 1:nrow(my_data)) {
if (my_data$score[i] > 4) {
my_data$quality[i] <- 'good'
} else my_data$quality[i] <- 'bad'
}
my_data$quality <- rep(NA, nrow(my_data))
for (i in 1:nrow(my_data)) {
if (my_data$score[i] > 4) {
my_data$quality[i] <- 'good'
print(my_data$quality[i])
} else {
my_data$quality[i] <- 'bad'
print(my_data$quality[i])
}
}
my_data$quality2 <- ifelse(my_data$score > 4, 'good', 'bad')
?Time-Series
?AirPassengers
str(AirPassengers)
str(my_data)
View(AirPassengers)
good_months <- AirPassengers[1:-length(AirPassengers)] < AirPassengers[-1:length(AirPassengers)]
View(AirPassengers)
AirPassengers
good_months <- AirPassengers[2:length(AirPassengers), 2:-length(AirPassengers)] < AirPassengers[2:length(AirPassengers), 3:length(AirPassengers)]
good_months <- 0
for (i in AirPassengers){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- good_months + AirPassengers[i+1]
}
}
AirPassengers[1:-length(AirPassengers)] < AirPassengers[-1:length(AirPassengers)]
n = AirPassengers
n = as.integer(AirPassengers)
as.integer(AirPassengers[1:-length(AirPassengers)]) < as.integer(AirPassengers[-1:length(AirPassengers)])
n
as.integer(AirPassengers[1:length(AirPassengers)-1]) < as.integer(AirPassengers[2:length(AirPassengers)])
AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)]
AirPassengers[2:length(AirPassengers)]* (AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)])
good_months <- AirPassengers[2:length(AirPassengers)] * (AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)]) != 0
good_months <- AirPassengers[2:length(AirPassengers)] * (AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)]) != 0
good_months
good_months <- AirPassengers[2:length(AirPassengers)] * ((AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)]) == TRUE)
good_months
good_months <- AirPassengers[2:length(AirPassengers)] * (AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)])
good_months
rm(good_months)
rm(n)
for (i in length(AirPassengers)-1){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- c(good_months, AirPassengers[i+1])
}
}
good_months <- 0
for (i in length(AirPassengers)-1){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- c(good_months, AirPassengers[i+1])
}
}
good_months <- 4
for (i in length(AirPassengers)-1){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- c(good_months, AirPassengers[i+1])
}
}
good_months <- 0
for (i in length(AirPassengers)-1){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- c(good_months, AirPassengers[i+1])
}
}
good_months <- AirPassengers[2:length(AirPassengers)] * (AirPassengers[1:length(AirPassengers)-1] < AirPassengers[2:length(AirPassengers)])
good_months
good_months <- NULL
i <- 1
while (i < length(AirPassengers)){
if (AirPassengers[i] < AirPassengers[i+1]){
good_months <- c(good_months, AirPassengers[i+1])
}
i <- i + 1
}
good_months
rm(good_months)
?cumsum
mean(AirPassengers[1:10])
cumsum(AirPassengers[1:10])
moving_average <- cumsum(mean(AirPassengers[1:10]))
cumsum(mean(AirPassengers[1:10]))
cumsum(mean(AirPassengers[1:10]):mean(AirPassengers[135:144]))
cumsum(mean(AirPassengers[1:10]), mean(AirPassengers[135:144]))
cumsum(AirPassengers[1:144])
cumsum(AirPassengers[1:10]:AirPassengers[11:144])
cumsum(AirPassengers[1:10]:AirPassengers[11:134])
cumsum(AirPassengers[1:10]:AirPassengers[11:144])
AirPassengers[2:144] - AirPassengers[1:143]
cumsum(AirPassengers[2:144] - AirPassengers[1:143]
cumsum(AirPassengers[2:144] - AirPassengers[1:143])
cumsum((AirPassengers[2:144] - AirPassengers[1:143]))
cumsum(mean(AirPassengers[2:144] - AirPassengers[1:143]))
cumsum(mean(AirPassengers[1:143] - AirPassengers[2:144]))
cumsum((AirPassengers[1:143] - AirPassengers[2:144]))
(AirPassengers[1:143] - AirPassengers[2:144])
(AirPassengers[2:144] - AirPassengers[1:143])
AirPassengers[i:i+9]
rm(i)
AirPassengers[i:i+9]
i <- 1
AirPassengers[i:(i+9)]
AirPassengers[i:i+9]
cx <- c(0, cumsum(AirPassengers))
cx
moving_average <- (cx[(11):length(cx)] - cx[1:(length(cx) - 10)]) / 10
moving_average
moving_average <- (cx[(11):length(cx)] - cx[1:(length(cx) - 10)])
moving_average
cx <- c(0, cumsum(AirPassengers))
cx
df <- mtcars
str(df)
df$vs <- factor(df$vs, labels = c('V', 'S'))
str(df)
View(df)
df$am <- factor(df$am, labels = c('Auto', 'Manual'))
median(df$mpg)
median(df$mpg)
mean(df$disp)
sd(df$hp)
range(df$cyl)
mean(df$mpg[df$cyl == 6])
mean(df$mpg[df$cyl == 6 & df$vs == 'V'])
sd(df$hp[df$cyl != 3 & df$am == 'Auto'])
rm
aggregate(x = df$hp, by = list(df$vs), FUN = mean)
df <- mtcars
str(df)
df$vs <- factor(df$vs, labels = c('V', 'S'))
df$am <- factor(df$am, labels = c('Auto', 'Manual'))
aggregate(x = df$hp, by = list(df$vs), FUN = mean)
mean_hp_vs
mean_hp_vs <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)
View(mean_hp_vs)
colnames(mean_hp_vs)
colnames(mean_hp_vs) <- c('VS', 'Mean HP')
aggregate(hp ~ vs, df, mean)
aggregate(hp ~ vs + am, df, mean)
aggregate(x = df[, -c(8,9)], by = list(df$am), FUN = median)
aggregate(mpg + disp ~ am + vs, sd)
aggregate(disp ~ am + vs, sd)
aggregate(mpg, disp ~ am + vs, df, sd)
aggregate(mpg + disp ~ am + vs, df, sd)
aggregate(df[, c(1,3)], by = list(df$am, df$vs), FUN = sd)
aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
setwd("C:/Users/79112/PROGRAMING/bs")
setwd("C:/Users/79112/PROGRAMING/business statistics")
setwd("C:/Users/79112/PROGRAMING/bs")
setwd("C:/Users/79112/PROGRAMING/bs")
save.image("C:/Users/79112/PROGRAMING/bs/.RData")
library(psych)
install.packages('psych')
library(psych)
library(psych)
.libPaths("C:\Users\79112\PROGRAMING\R-4.2.1\library")
sessionInfo()
.libPaths("C:\Users\79112\PROGRAMING\R-4.2.1\library")
.libPaths(C:\Users\79112\PROGRAMING\R-4.2.1\library)
.libPaths("C:/Users/79112/PROGRAMING/R-4.2.1/library")
library(psych)
library(boot)
library(psych)
install.packages("ggplot2")
library(ggplot2)
describe(x = df)
descr <- describe(x = df)
describeBy(x = df, group = df$vs)
descr2 <- describeBy(x = df, group = df$vs, mat = )
View(descr2)
descr2$S
descr2 <- describeBy(x = df, group = df$vs, mat = T)
descr2$S
View(descr2)
descr2 <- describeBy(x = df, group = df$vs, mat = T, digits = 1)
descr3 <- describeBy(x = df, group = df$vs, mat = T, digits = 1, FAST = T)
descr3 <- describeBy(x = df, group = df$vs, mat = T, digits = 1, fast = T)
View(descr3)
describeBy(df$qsec, group = list(df$vs, df$am), mat = T)
describeBy(df$qsec, group = list(df$vs, df$am), mat = T, digits = 1, fast = T)
View(df)
is.na(df$mpg)
sum(is.na(df$mpg))
sum(is.na(df))
df$mpg[1:10] <- NA
sum(is.na(df))
mean(df$mpg)
mean(df$mpg, na.rm = T)
aggregate(mpg ~ am, df, sd)
airquality
result <- aggregate(x = subset(airquality[c(7:9), ], by = list(airquality$Ozone))
result
result <- aggregate(x = subset(airquality[c(7:9), ]), by = list(airquality$Ozone))
aq <- subset(airquality[c(7:9), ])
View(aq)
aq <- subset(airquality[, 'Month'])
aq <- subset(airquality[, 'Month' == c(7:9)])
aq <- subset(airquality[, 'Month' == c(7)])
aq <- subset(airquality[, airquality$Month == c(7:9)])
aq <- subset(airquality[airquality$Month == c(7:9)])
aq <- subset(airquality[airquality$Month == c(7:9), ])
View(aq)
result <- length(aggregate(Ozone ~ Month, aq, FUN = n))
result <- length(aggregate(Ozone ~ Month, aq, FUN = length)
result
result <- aggregate(Ozone ~ Month, aq, FUN = length())
result <- aggregate(Ozone ~ Month, aq, FUN = )
result <- aggregate(Ozone ~ Month, aq, FUN = length(aq$Ozone))
aggregate(hp ~ vs, df, mean)
?FUN
?'FUN'
result <- aggregate(cbind(Ozone, Solar.R, Wind, Temp) ~ Month, aq, mean)
result
df_2 <- subset(df,df$Month == c(7,8,9))
aggregate(Ozone ~ Month,df_2,length)
df_2 <- subset(airquality[airquality$Month == c(7:9), ])
aggregate(Ozone ~ Month, df_2, length)
aw <- airquality
View(aw)
aq <- subset(airquality[airquality$Month %in% c(7:9), ])
rm(aw)
rm(df_2)
aq <- subset(airquality[airquality$Month %in% c(7:9), ])
result <- aggregate(Ozone ~ Month, aq, length)
result
describeBy(airquality, group = airquality$Month)
describeBy(airquality, group = airquality$Month, mat = T)
describeBy(airquality, group = airquality$Month)
View(iris)
sd(iris)
describe(iris)
describeBy(iris, Species)
describeBy(iris, iris$Species)
?replace
save.image("C:/Users/79112/PROGRAMING/bs/.RData")
savehistory("C:/Users/79112/PROGRAMING/bs/.Rhistory")
ap <- AirPassengers
good_months <- ap[-1] - ap[-length(ap)]
good_months
good_months <- ap[-1] > ap[-length(ap)]
good_months <- ap[-1]*(ap[-1] > ap[-length(ap)])
good_months
good_months <- ap[-1][(ap[-1] > ap[-length(ap)])]
good_months <- AirPassengers[-1][(AirPassengers[-1] > AirPassengers[-length(ap)])]
good_months
good_months <- AirPassengers[-1][AirPassengers[-1] >
AirPassengers[-length(AirPassengers)]]
rm(ap)
rm(good_months)
cumsum(ap[1:10])
ap <- AirPassengers
cumsum(ap[1:10])
source("C:/Users/79112/PROGRAMING/bs/stepik_course_1.R", echo=TRUE)
ptint(AirPassengers)
print(AirPassengers)
cumsum(ap[11:144])
cumsum(ap[1:144])
cumsum(ap[1:144]) - cumsum(ap[1:10])
cumsum(ap[1:144])/10 - cumsum(ap[1:10])
(cumsum(ap[1:144]) - cumsum(ap[1:10]))/10
(c(0, cumsum(ap[1:144])) - cumsum(ap[1:10]))/10
cumsum(ap[1:144]) - cumsum(ap[1:10])
cumsum(ap[1:144]) - c(0, cumsum(ap[1:10]))
cumsum(ap[11:144]) - cumsum(ap[1:10])
cumsum(ap[11:144]) - cumsum(ap[1:10]/10)
cumsum(ap[11:144]) - cumsum(ap[1:10])
cumsum(ap[1:144]) - cumsum(ap[11:144]) - cumsum(ap[1:10])
(cumsum(ap[1:144]) - cumsum(ap[11:144])) - cumsum(ap[1:10])
cumsum(ap[(1:144)/10])
cumsum(ap[(1:144)])
cumsum(ap[1:144]/10)
cumsum(ap[11:144]-ap[1:10])
cumsum(ap[11:144]-ap[1:133])
cumsum(ap[11:144]-ap[1:134])
cs = cumsum(ap[1:144])
cumsum(cs[11:144]-cs[1:134])
cs = c(0, cumsum(ap[1:144]))
cumsum(cs[11:144]-cs[1:134])
cumsum(cs[11:144]-cs[1:134])/10
cumsum(cs[11:144]-cs[11:134])/10
cumsum(cs[11:144]-cs[10:134])/10
cumsum(cs[11:144]-cs[1:134])/10
cumsum(cs[11:144])-cumsum(cs[1:134])
cumsum(cs[11:144])-cumsum(cs[1:134])/10
(cumsum(cs[11:144])-cumsum(cs[1:134]))/10
(cumsum(cs[11:144])-cumsum(cs[11:134]))/10
(cumsum(cs[11:144])-cumsum(cs[1:133]))/10
cs = c(0, cumsum(ap[1:144]))
(cumsum(cs[11:144])-cumsum(cs[1:133]))/10
(cumsum(cs[2:144])-cumsum(cs[1:143]))/10
(cumsum(cs[2:144])-cumsum(cs[1:143]))/10
cs = c(0, cumsum(ap[11:144]))
(cumsum(cs[2:144])-cumsum(cs[1:143]))/10
(cumsum(cs[11:134])-cumsum(cs[1:144]))/10
cs = c(0, cumsum(ap[10:144]))
moving_average <- (cumsum(cs[11:134])-cumsum(cs[1:144]))/10
cs = c(0, cumsum(ap[10:144]))
moving_average <- (cumsum(cs[11:133])-cumsum(cs[1:144]))/10
cs = c(0, cumsum(ap[10:144]))
moving_average <- (cumsum(cs[11:144])-cumsum(cs[1:134]))/10
moving_average
cs = c(0, ap[10:144])
moving_average <- (cumsum(cs[11:144])-cumsum(cs[1:134]))/10
moving_average
cs = c(0, ap[1:144])
moving_average <- (cumsum(cs[11:144])-cumsum(cs[1:134]))/10
moving_average
moving_average <- (cumsum(cs[11:144])-cumsum(cs[1:135]))/10
moving_average
cs = c(0, cumsum(ap[1:144]))
moving_average <- (cumsum(cs[11:144])-cumsum(cs[10:135]))/10
moving_average
(cs[11:144]-cs[10:135])/10
moving_average <- (cs[11:144]-cs[1:135])/10
moving_average
moving_average
moving_average <- (cs[11:144]-cs[1:134])/10
moving_average
moving_average <- (cs[11:143]-cs[1:135])/10
moving_average
moving_average <- (cs[10:144]-cs[1:135])/10
moving_average
moving_average <- (cs[11:144]-cs[1:135])/10
moving_average
moving_average <- c((cs[11:144]-cs[1:135])/10, cumsum(134:144))
moving_average
moving_average <- c((cs[11:144]-cs[1:135])/10, cumsum(cs(134:144))
moving_average
moving_average <- (cs[11:144]-cs[1:135])/10)
moving_average
moving_average <- (cs[11:144]-cs[1:135])/10
moving_average
moving_average <- (cs[11:144]-cs[1:134])/10
moving_average
moving_average <- c((cs[11:144]-cs[1:134]), cs[135:144])/10
moving_average
moving_average <- c((cs[11:144]-cs[1:134]), cs[144])/10
moving_average
cs = c(0, cumsum(ap[1:144]))
moving_average <- (cs[11:145]-cs[1:135])/10
moving_average
View(df)
rm(ap)
rm(cs)
rm(moving_average)
save.image("C:/Users/79112/PROGRAMING/bs/.RData")
aggregate(hp ~ vs + am, df, mean)
?replace
savehistory("C:/Users/79112/PROGRAMING/bs/.Rhistory")
